<?php

namespace IfRPGMaker\HistoireBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\DBAL\DriverManager;

/**
 * ScenarioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ScenarioRepository extends EntityRepository
{
    public function getConnection()
    {
        return $this->_em->getConnection();
    }
    
    public function find($id)
    {
        $sql = "SELECT * FROM Scenario WHERE titre=".$id['titre'].
                " AND auteur_id=".$id['auteur_id'].
                " AND debut_id=".$id['debut_id'];
        
        $query = $this->createQueryBuilder("i")
                ->where("i.titre = :titre")
                ->setParameter("titre", $id['titre'])
                ->andWhere("i.auteur_id = :auteur_id")
                ->setParameter("auteur_id", $id['auteur_id'])
                ->andWhere("i.debut_id = :debut_id")
                ->setParameter("debut_id", $id['debut_id'])
                ->getQuery();
                
       $res = $query->getResult();
        if (empty($res))
            $res = NULL;
        else
            $res = $res[0];
        return array("sql" => $sql, "entity"=> $res);
    }
    
    public function findByAuteur($auteur)
    {
        $sql = "SELECT * FROM Scenario WHERE auteur_id=" .$auteur;
        
        $query = $this->createQueryBuilder("i")
                ->where("i.auteur_id = :auteur_id")
                ->setParameter("auteur_id", $auteur)
                ->getQuery();
        
        $res = $query->getResult();
        return array("sql" => $sql, "entities"=> $res);
    }
    public function findByDebut($debut_id)
    {
        $sql = "SELECT * FROM Scenario WHERE debut_id=" .$debut_id;
        
        $query = $this->createQueryBuilder("i")
                ->where("i.debut_id = :debut_id")
                ->setParameter("debut_id", $debut_id)
                ->getQuery();
        
        $res = $query->getResult();
        return array("sql" => $sql, "entities"=> $res);
    }
    public function findByTitre($titre)
    {
        $sql = "SELECT * FROM Scenario WHERE titre=" .$titre;
        
        $query = $this->createQueryBuilder("i")
                ->where("i.titre = :titre")
                ->setParameter("titre", $titre)
                ->getQuery();
        
        $res = $query->getResult();
        return array("sql" => $sql, "entities"=> $res);
    }
    
    public function findAll()
    {
        $sql = "SELECT * FROM Scenario";
        
        $query = $this->createQueryBuilder("i")->getQuery();
        $res = $query->getResult();
        
        return array("sql" => $sql, "entities" => $res);
    }
    
    public function insert($entity) {
        $sql = "INSERT INTO Scenario (auteur_id, debut_id, titre) VALUES ('".
                $entity->getAuteur()->getPseudo().", ".
                $entity->getDebut()->getId().", ".
                $entity->getTitre().
                "')";
        $conn = $this->getConnection();
        
        $conn->insert('Scenario', array('auteur_id' => $entity->getAuteur()->getPseudo(),
            'debut_id' => $entity->getDebut()->getId(),
            'titre' => $entity->getTitre()));
        
        return array('sql' => $sql,
            'auteur_id' => $entity->getAuteur()->getPseudo(),
            'debut_id' => $entity->getDebut()->getId());
    }
    
    public function delete($entity) {
        $sql = "DELETE FROM Scenario WHERE id=".$entity->getId();
        
        $conn = $this->getConnection();
        $conn->delete('Scenario', array('id' => $entity->getId()));
        
        return $sql;
    }
    
    public function update($entity) {
        $sql = "UPDATE Scenario SET auteur='".$entity->getAuteur()->getPseudo().
                "', debut_id=".$entity->getDebut()->getId().
                ", titre_histoire_id='".$entity->getTitre().
                "' WHERE titre=".$entity->getTitre().
                " AND auteur_id=".$entity->getAuteur()->getPseudo().
                " AND debut_id=".$entity->getDebut()->getId();
        
        $conn = $this->getConnection();
        $conn->update('Scenario', 
                array('auteur' => $entity->getAuteur()->getPseudo(),
                    'debut_id' => $entity->getDebut()->getId(),
                    'titre_histoire_id' => $entity->getTitre()
                    ), 
                array('auteur_id' => $entity->getAuteur()->getPseudo(),
                    'debut_id' => $entity->getDebut()->getId(),
                    'titre_histoire_id' => $entity->getTitre())
                );
        
        return $sql;
    }
}
