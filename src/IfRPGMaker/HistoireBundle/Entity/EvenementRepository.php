<?php

namespace IfRPGMaker\HistoireBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\DBAL\DriverManager;

/**
 * EvenementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EvenementRepository extends EntityRepository
{
    public function getConnection()
    {
        return $this->_em->getConnection();
    }
    
    public function find($id)
    {
        $sql = "SELECT * FROM Evenement WHERE intro=".$id['intro'].
                " AND description=".$id['description'];
        
        $query = $this->createQueryBuilder("i")->where("i.intro = :intro")
                ->setParameter("intro", $id['intro'])
                ->andWhere("i.description = :description")
                ->setParameter("description", $id['description'])
                ->getQuery();
                
       $res = $query->getResult();
        if (empty($res))
            $res = NULL;
        else
            $res = $res[0];
        return array("sql" => $sql, "entity"=> $res);
    }
    
    public function findByIntro($intro)
    {
        $sql = "SELECT * FROM Evenement WHERE intro=" .$intro;
        
        $query = $this->createQueryBuilder("i")
                ->where("i.intro = :intro")
                ->setParameter("intro", $intro)
                ->getQuery();
        
        $res = $query->getResult();
        return array("sql" => $sql, "entities"=> $res);
    }
    public function findByDescription($description)
    {
        $sql = "SELECT * FROM Evenement WHERE description=" .$description;
        
        $query = $this->createQueryBuilder("i")
                ->where("i.description = :description")
                ->setParameter("description", $description)
                ->getQuery();
        
        $res = $query->getResult();
        return array("sql" => $sql, "entities"=> $res);
    }
    
    public function findAll()
    {
        $sql = "SELECT * FROM Evenement";
        
        $query = $this->createQueryBuilder("i")->getQuery();
        $res = $query->getResult();
        
        return array("sql" => $sql, "entities" => $res);
    }
    
    public function insert($entity) {
        $sql = "INSERT INTO Evenement (intro, description) VALUES ('".
                $entity->getAuteur()->getPseudo().", ".
                $entity->getDebut()->getId().
                "')";
        $conn = $this->getConnection();
        
        $conn->insert('Evenement', array('intro' => $entity->getIntro()->getContenu(),
            'description' => $entity->getDescription()->getContenu()
                ));
        
        return array('sql' => $sql,
            'intro' => $entity->getIntro()->getContenu(),
            'description' => $entity->ggetDescription()->getContenu());
    }
    
    public function delete($entity) {
        $sql = "DELETE FROM Evenement WHERE intro=".$entity->getIntro()->getId().
                " AND description=".$entity->getDescription()->getId();
        
        $conn = $this->getConnection();
        $conn->delete('Evenement', array('intro' => $entity->getIntro()->getId(),
            'description' => $entity->getDescription()->getId()));
        
        return $sql;
    }
    
    public function update($entity) {
        $sql = "UPDATE Evenement SET intro='".$entity->getIntro()->getId().
                "', description=".$entity->getDescription()->getId().
                "' WHERE titre=".$entity->getTitre().
                " AND intro=".$entity->getAuteur()->getPseudo().
                " AND description=".$entity->getDebut()->getId();
        
        $conn = $this->getConnection();
        $conn->update('Evenement', 
                array('intro' => $entity->getAuteur()->getPseudo(),
                    'description' => $entity->getDebut()->getId(),
                    'titre_histoire_id' => $entity->getTitre()
                    ), 
                array('intro' => $entity->getAuteur()->getPseudo(),
                    'description' => $entity->getDebut()->getId(),
                    'titre_histoire_id' => $entity->getTitre())
                );
        
        return $sql;
    }
}
